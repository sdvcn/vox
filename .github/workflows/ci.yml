name: CI
on:
  push: # test + build + release
    branches: [ master ]
  pull_request: # test + build
    branches: [ master ]
  release: # test + build + release
    types: [ published ]
env:
  DC: ldc-1.28.0

jobs:
  test:
    name: Test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: dlang-community/setup-dlang@v1
        with:
          compiler: ${{ env.DC }}
      - name: Test
        shell: bash
        run: |
          cd source
          ldc2 -m64 -g -i main.d -unittest -of=test.exe
          ./test.exe
  build:
    name: Build
    needs: [test]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
        - os: ubuntu-latest
          EXE: vox
          PLATFORM: linux-x64
        - os: macos-latest
          EXE: vox
          PLATFORM: macos-x64
        - os: windows-latest
          EXE: vox.exe
          PLATFORM: windows-x64
    steps:
      - uses: actions/checkout@v2
      - uses: dlang-community/setup-dlang@v1
        with:
          compiler: ${{ env.DC }}
      - name: Build release
        shell: bash
        run: |
          cd source
          ldc2 -m64 -O3 -release -boundscheck=off -enable-inlining -flto=full -linkonce-templates --defaultlib=phobos2-ldc-lto,druntime-ldc-lto -d-version=cli -of=${{matrix.EXE}} -i main.d
          7z a -mx9 vox-${{matrix.PLATFORM}}.zip ${{matrix.EXE}}
      - uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.PLATFORM}}
          path: ./source/vox-${{matrix.PLATFORM}}.zip
  build-debug:
    name: Build debug
    needs: [test]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
        - os: ubuntu-latest
          EXE: vox
          PLATFORM: linux-x64
        - os: macos-latest
          EXE: vox
          PLATFORM: macos-x64
        - os: windows-latest
          EXE: vox.exe
          DBG_FILE: vox.pdb
          PLATFORM: windows-x64
    steps:
      - uses: actions/checkout@v2
      - uses: dlang-community/setup-dlang@v1
        with:
          compiler: ${{ env.DC }}
      - name: Build release
        shell: bash
        run: |
          cd source
          ldc2 -m64 -O3 --d-debug -g -boundscheck=off -enable-inlining -flto=full -linkonce-templates --defaultlib=phobos2-ldc-lto,druntime-ldc-lto -d-version=cli -of=${{matrix.EXE}} -i main.d
          7z a -mx9 vox-${{matrix.PLATFORM}}-dbg.zip ${{matrix.EXE}} ${{matrix.DBG_FILE}}
      - uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.PLATFORM}}-dbg
          path: ./source/vox-${{matrix.PLATFORM}}-dbg.zip

  upload:
    name: Upload build
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: [build, build-debug]
    steps:
      # Cloning is needed for `gh release create` to work. It looks repository up in .git folder
      - uses: actions/checkout@v2
      # Download build artifacts of other jobs
      - uses: actions/download-artifact@v2
        with:
          path: .
      # Update tag, so that we get proper date and commit on github
      - name: Update CI tag
        uses: richardsimko/update-tag@master
        if: github.ref == 'refs/heads/master'
        with:
          tag_name: CI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Create CI release and upload builds
      - name: Upload
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          tag=`basename ${{ github.ref }}`
          if [ $tag = 'master' ]; then
            tag='CI'
          fi
          
          # --clobber Overwrite existing assets of the same name
          gh release upload $tag \
            './linux-x64/vox-linux-x64.zip' \
            './linux-x64-dbg/vox-linux-x64-dbg.zip' \
            './macos-x64/vox-macos-x64.zip' \
            './macos-x64-dbg/vox-macos-x64-dbg.zip' \
            './windows-x64/vox-windows-x64.zip' \
            './windows-x64-dbg/vox-windows-x64-dbg.zip' \
            --clobber
