module be.amd64asm_tests;

import std.stdio;

import utils : Arena, currTime, scaledNumberFmt;
import be.amd64asm;

struct CodegenTester
{
	Arena!ubyte arena;

	CodeGen_x86_64 gen;
	alias gen this;

	uint totalTests;
	uint numFailedTests;

	void assertHexAndReset(string file = __MODULE__, size_t line = __LINE__)(string expected) {
		import std.string : format;
		assertEqual!(file, line)(expected, format("%(%02X%)", gen.encoder.code));
		arena.clear();
	}

	private void assertEqual(string file = __MODULE__, size_t line = __LINE__, A, B)(A expected, B generated)
	{
		++totalTests;
		if (expected != generated)
		{
			writefln("%s expected", expected);
			writefln("%s generated", generated);
			stdout.flush();
			writefln("at %s:%s", file, line);

			++numFailedTests;
		}
	}
}

int testAmd64Asm()
{
	CodegenTester tester;
	tester.arena.setBuffer(new ubyte[65536], 65536);
	tester.gen.encoder.setBuffer(&tester.arena);

	auto startTime = currTime;

	// Add reg8, reg8
	foreach (Register regA; Register.min..RegisterMax) tester.addb(regA, Register.min);
	foreach (Register regB; Register.min..RegisterMax) tester.addb(Register.min, regB);
	tester.assertHexAndReset("00C000C100C200C34000C44000C54000C64000C74100C04100C14100C24100C34100C44100C54100C64100C700C000C800D000D84000E04000E84000F04000F84400C04400C84400D04400D84400E04400E84400F04400F8");

	// Add reg16, reg16
	foreach (Register regA; Register.min..RegisterMax) tester.addw(regA, Register.min);
	foreach (Register regB; Register.min..RegisterMax) tester.addw(Register.min, regB);
	tester.assertHexAndReset("6601C06601C16601C26601C36601C46601C56601C66601C7664101C0664101C1664101C2664101C3664101C4664101C5664101C6664101C76601C06601C86601D06601D86601E06601E86601F06601F8664401C0664401C8664401D0664401D8664401E0664401E8664401F0664401F8");

	// Add reg32, reg32
	foreach (Register regA; Register.min..RegisterMax) tester.addd(regA, Register.min);
	foreach (Register regB; Register.min..RegisterMax) tester.addd(Register.min, regB);
	tester.assertHexAndReset("01C001C101C201C301C401C501C601C74101C04101C14101C24101C34101C44101C54101C64101C701C001C801D001D801E001E801F001F84401C04401C84401D04401D84401E04401E84401F04401F8");

	// Add reg64, reg64
	foreach (Register regA; Register.min..RegisterMax) tester.addq(regA, Register.min);
	foreach (Register regB; Register.min..RegisterMax) tester.addq(Register.min, regB);
	tester.assertHexAndReset("4801C04801C14801C24801C34801C44801C54801C64801C74901C04901C14901C24901C34901C44901C54901C64901C74801C04801C84801D04801D84801E04801E84801F04801F84C01C04C01C84C01D04C01D84C01E04C01E84C01F04C01F8");

	// Add reg8, imm8
	foreach (Register regA; Register.min..RegisterMax) tester.addb(regA, Imm8(0x24));
	tester.assertHexAndReset("80C02480C12480C22480C3244080C4244080C5244080C6244080C7244180C0244180C1244180C2244180C3244180C4244180C5244180C6244180C724");

	// Add reg16, imm8
	foreach (Register regA; Register.min..RegisterMax) tester.addw(regA, Imm8(0x24));
	tester.assertHexAndReset("6683C0246683C1246683C2246683C3246683C4246683C5246683C6246683C724664183C024664183C124664183C224664183C324664183C424664183C524664183C624664183C724");

	// Add reg32, imm8
	foreach (Register regA; Register.min..RegisterMax) tester.addd(regA, Imm8(0x24));
	tester.assertHexAndReset("83C02483C12483C22483C32483C42483C52483C62483C7244183C0244183C1244183C2244183C3244183C4244183C5244183C6244183C724");

	// Add reg64, imm8
	foreach (Register regA; Register.min..RegisterMax) tester.addq(regA, Imm8(0x24));
	tester.assertHexAndReset("4883C0244883C1244883C2244883C3244883C4244883C5244883C6244883C7244983C0244983C1244983C2244983C3244983C4244983C5244983C6244983C724");

	// Add reg16, imm16
	foreach (Register regA; Register.min..RegisterMax) tester.addw(regA, Imm16(0x2436));
	tester.assertHexAndReset("6681C036246681C136246681C236246681C336246681C436246681C536246681C636246681C73624664181C03624664181C13624664181C23624664181C33624664181C43624664181C53624664181C63624664181C73624");

	// Add reg32, imm32
	foreach (Register regA; Register.min..RegisterMax) tester.addd(regA, Imm32(0x24364758));
	tester.assertHexAndReset("81C05847362481C15847362481C25847362481C35847362481C45847362481C55847362481C65847362481C7584736244181C0584736244181C1584736244181C2584736244181C3584736244181C4584736244181C5584736244181C6584736244181C758473624");

	// Add reg64, imm32
	foreach (Register regA; Register.min..RegisterMax) tester.addq(regA, Imm32(0x24364758));
	tester.assertHexAndReset("4881C0584736244881C1584736244881C2584736244881C3584736244881C4584736244881C5584736244881C6584736244881C7584736244981C0584736244981C1584736244981C2584736244981C3584736244981C4584736244981C5584736244981C6584736244981C758473624");


	// Mov reg8, reg8
	foreach (Register regA; Register.min..RegisterMax) tester.movb(regA, Register.min);
	foreach (Register regB; Register.min..RegisterMax) tester.movb(Register.min, regB);
	tester.assertHexAndReset("88C088C188C288C34088C44088C54088C64088C74188C04188C14188C24188C34188C44188C54188C64188C788C088C888D088D84088E04088E84088F04088F84488C04488C84488D04488D84488E04488E84488F04488F8");

	// Mov reg16, reg16
	foreach (Register regA; Register.min..RegisterMax) tester.movw(regA, Register.min);
	foreach (Register regB; Register.min..RegisterMax) tester.movw(Register.min, regB);
	tester.assertHexAndReset("6689C06689C16689C26689C36689C46689C56689C66689C7664189C0664189C1664189C2664189C3664189C4664189C5664189C6664189C76689C06689C86689D06689D86689E06689E86689F06689F8664489C0664489C8664489D0664489D8664489E0664489E8664489F0664489F8");

	// Mov reg32, reg32
	foreach (Register regA; Register.min..RegisterMax) tester.movd(regA, Register.min);
	foreach (Register regB; Register.min..RegisterMax) tester.movd(Register.min, regB);
	tester.assertHexAndReset("89C089C189C289C389C489C589C689C74189C04189C14189C24189C34189C44189C54189C64189C789C089C889D089D889E089E889F089F84489C04489C84489D04489D84489E04489E84489F04489F8");

	// Mov reg64, reg64
	foreach (Register regA; Register.min..RegisterMax) tester.movq(regA, Register.min);
	foreach (Register regB; Register.min..RegisterMax) tester.movq(Register.min, regB);
	tester.assertHexAndReset("4889C04889C14889C24889C34889C44889C54889C64889C74989C04989C14989C24989C34989C44989C54989C64989C74889C04889C84889D04889D84889E04889E84889F04889F84C89C04C89C84C89D04C89D84C89E04C89E84C89F04C89F8");

	// Mov reg8, imm8
	foreach (Register regA; Register.min..RegisterMax) tester.movb(regA, Imm8(0x24));
	tester.assertHexAndReset("B024B124B224B32440B42440B52440B62440B72441B02441B12441B22441B32441B42441B52441B62441B724");

	// Mov reg16, imm16
	foreach (Register regA; Register.min..RegisterMax) tester.movw(regA, Imm16(0x2436));
	tester.assertHexAndReset("66B8362466B9362466BA362466BB362466BC362466BD362466BE362466BF36246641B836246641B936246641BA36246641BB36246641BC36246641BD36246641BE36246641BF3624");

	// Mov reg32, imm32
	foreach (Register regA; Register.min..RegisterMax) tester.movd(regA, Imm32(0x24364758));
	tester.assertHexAndReset("B858473624B958473624BA58473624BB58473624BC58473624BD58473624BE58473624BF5847362441B85847362441B95847362441BA5847362441BB5847362441BC5847362441BD5847362441BE5847362441BF58473624");

	// Mov reg64, imm32
	foreach (Register regA; Register.min..RegisterMax) tester.movq(regA, Imm32(0x24364758));
	tester.assertHexAndReset("48C7C05847362448C7C15847362448C7C25847362448C7C35847362448C7C45847362448C7C55847362448C7C65847362448C7C75847362449C7C05847362449C7C15847362449C7C25847362449C7C35847362449C7C45847362449C7C55847362449C7C65847362449C7C758473624");

	// Mov reg64, imm64
	foreach (Register regA; Register.min..RegisterMax) tester.movq(regA, Imm64(0x24364758AABBCCDD));
	tester.assertHexAndReset("48B8DDCCBBAA5847362448B9DDCCBBAA5847362448BADDCCBBAA5847362448BBDDCCBBAA5847362448BCDDCCBBAA5847362448BDDDCCBBAA5847362448BEDDCCBBAA5847362448BFDDCCBBAA5847362449B8DDCCBBAA5847362449B9DDCCBBAA5847362449BADDCCBBAA5847362449BBDDCCBBAA5847362449BCDDCCBBAA5847362449BDDDCCBBAA5847362449BEDDCCBBAA5847362449BFDDCCBBAA58473624");

	// Mov reg8 mem8
	foreach (Register regA; Register.min..RegisterMax) tester.movb(regA, memAddrDisp32(0x55667788));
	tester.assertHexAndReset("8A0425887766558A0C25887766558A1425887766558A1C2588776655408A242588776655408A2C2588776655408A342588776655408A3C2588776655448A042588776655448A0C2588776655448A142588776655448A1C2588776655448A242588776655448A2C2588776655448A342588776655448A3C2588776655");

	// Mov reg16, mem16
	foreach (Register regA; Register.min..RegisterMax) tester.movw(regA, memAddrDisp32(0x55667788));
	tester.assertHexAndReset("668B042588776655668B0C2588776655668B142588776655668B1C2588776655668B242588776655668B2C2588776655668B342588776655668B3C258877665566448B04258877665566448B0C258877665566448B14258877665566448B1C258877665566448B24258877665566448B2C258877665566448B34258877665566448B3C2588776655");

	// Mov reg32, mem32
	foreach (Register regA; Register.min..RegisterMax) tester.movd(regA, memAddrDisp32(0x55667788));
	tester.assertHexAndReset("8B0425887766558B0C25887766558B1425887766558B1C25887766558B2425887766558B2C25887766558B3425887766558B3C2588776655448B042588776655448B0C2588776655448B142588776655448B1C2588776655448B242588776655448B2C2588776655448B342588776655448B3C2588776655");

	// Mov reg64, mem64
	foreach (Register regA; Register.min..RegisterMax) tester.movq(regA, memAddrDisp32(0x55667788));
	tester.assertHexAndReset("488B042588776655488B0C2588776655488B142588776655488B1C2588776655488B242588776655488B2C2588776655488B342588776655488B3C25887766554C8B0425887766554C8B0C25887766554C8B1425887766554C8B1C25887766554C8B2425887766554C8B2C25887766554C8B3425887766554C8B3C2588776655");

	// Mov mem8, reg8
	foreach (Register regA; Register.min..RegisterMax) tester.movb(memAddrDisp32(0x55667788), regA);
	tester.assertHexAndReset("88042588776655880C258877665588142588776655881C2588776655408824258877665540882C2588776655408834258877665540883C2588776655448804258877665544880C2588776655448814258877665544881C2588776655448824258877665544882C2588776655448834258877665544883C2588776655");

	// Mov mem16, reg16
	foreach (Register regA; Register.min..RegisterMax) tester.movw(memAddrDisp32(0x55667788), regA);
	tester.assertHexAndReset("668904258877665566890C2588776655668914258877665566891C2588776655668924258877665566892C2588776655668934258877665566893C25887766556644890425887766556644890C25887766556644891425887766556644891C25887766556644892425887766556644892C25887766556644893425887766556644893C2588776655");

	// Mov mem32, reg32
	foreach (Register regA; Register.min..RegisterMax) tester.movd(memAddrDisp32(0x55667788), regA);
	tester.assertHexAndReset("89042588776655890C258877665589142588776655891C258877665589242588776655892C258877665589342588776655893C2588776655448904258877665544890C2588776655448914258877665544891C2588776655448924258877665544892C2588776655448934258877665544893C2588776655");

	// Mov mem64, reg64
	foreach (Register regA; Register.min..RegisterMax) tester.movq(memAddrDisp32(0x55667788), regA);
	tester.assertHexAndReset("488904258877665548890C2588776655488914258877665548891C2588776655488924258877665548892C2588776655488934258877665548893C25887766554C890425887766554C890C25887766554C891425887766554C891C25887766554C892425887766554C892C25887766554C893425887766554C893C2588776655");

	// Mov mem8, imm8
	tester.movb(memAddrDisp32(0x55667788), Imm8(0xAA));
	tester.assertHexAndReset("C6042588776655AA");

	// Mov mem16, imm16
	tester.movw(memAddrDisp32(0x55667788), Imm16(0xAABB));
	tester.assertHexAndReset("66C7042588776655BBAA");

	// Mov mem32, imm32
	tester.movd(memAddrDisp32(0x55667788), Imm32(0xAABBCCDD));
	tester.assertHexAndReset("C7042588776655DDCCBBAA");

	// Mov mem64 imm32
	// mov QWORD PTR [rsp-8], 0xffffffffaabbccdd
	tester.movq(memAddrBaseDisp8(Register.SP, cast(ubyte)(-8)), Imm32(0xAABBCCDD)); // -8
	tester.assertHexAndReset("48C74424F8DDCCBBAA");


	// test memory encoding
	foreach (Register regA; Register.min..RegisterMax) tester.movq(regA, memAddrDisp32(0x11223344));
	tester.assertHexAndReset("488B042544332211488B0C2544332211488B142544332211488B1C2544332211488B242544332211488B2C2544332211488B342544332211488B3C25443322114C8B0425443322114C8B0C25443322114C8B1425443322114C8B1C25443322114C8B2425443322114C8B2C25443322114C8B3425443322114C8B3C2544332211");

	foreach (Register regA; Register.min..RegisterMax) if (regA != Register.SP) tester.movq(regA, memAddrIndexDisp32(regA, SibScale(0), 0x11223344));
	tester.assertHexAndReset("488B040544332211488B0C0D44332211488B141544332211488B1C1D44332211488B2C2D44332211488B343544332211488B3C3D443322114E8B0405443322114E8B0C0D443322114E8B1415443322114E8B1C1D443322114E8B2425443322114E8B2C2D443322114E8B3435443322114E8B3C3D44332211");

	foreach (Register regA; Register.min..RegisterMax) tester.movq(regA, memAddrBase(regA));
	tester.assertHexAndReset("488B00488B09488B12488B1B488B2424488B6D00488B36488B3F4D8B004D8B094D8B124D8B1B4D8B24244D8B6D004D8B364D8B3F");

	foreach (Register regA; Register.min..RegisterMax) tester.movq(regA, memAddrBaseDisp32(regA, 0x11223344));
	tester.assertHexAndReset("488B8044332211488B8944332211488B9244332211488B9B44332211488BA42444332211488BAD44332211488BB644332211488BBF443322114D8B80443322114D8B89443322114D8B92443322114D8B9B443322114D8BA424443322114D8BAD443322114D8BB6443322114D8BBF44332211");

	foreach (Register regA; Register.min..RegisterMax) tester.movq(regA, memAddrBaseIndex(regA, regA == Register.SP ? Register.AX : regA, SibScale(1)));
	tester.assertHexAndReset("488B0440488B0C49488B1452488B1C5B488B2444488B6C6D00488B3476488B3C7F4F8B04404F8B0C494F8B14524F8B1C5B4F8B24644F8B6C6D004F8B34764F8B3C7F");

	foreach (Register regA; Register.min..RegisterMax) tester.movq(regA, memAddrBaseIndexDisp32(regA, regA == Register.SP ? Register.AX : regA, SibScale(2), 0x11223344));
	tester.assertHexAndReset("488B848044332211488B8C8944332211488B949244332211488B9C9B44332211488BA48444332211488BACAD44332211488BB4B644332211488BBCBF443322114F8B8480443322114F8B8C89443322114F8B9492443322114F8B9C9B443322114F8BA4A4443322114F8BACAD443322114F8BB4B6443322114F8BBCBF44332211");

	foreach (Register regA; Register.min..RegisterMax) tester.movq(regA, memAddrBaseDisp8(regA, -2));
	tester.assertHexAndReset("488B40FE488B49FE488B52FE488B5BFE488B6424FE488B6DFE488B76FE488B7FFE4D8B40FE4D8B49FE4D8B52FE4D8B5BFE4D8B6424FE4D8B6DFE4D8B76FE4D8B7FFE");

	foreach (Register regA; Register.min..RegisterMax) tester.movq(regA, memAddrBaseIndexDisp8(regA, regA == Register.SP ? Register.AX : regA, SibScale(3), -2));
	tester.assertHexAndReset("488B44C0FE488B4CC9FE488B54D2FE488B5CDBFE488B64C4FE488B6CEDFE488B74F6FE488B7CFFFE4F8B44C0FE4F8B4CC9FE4F8B54D2FE4F8B5CDBFE4F8B64E4FE4F8B6CEDFE4F8B74F6FE4F8B7CFFFE");


	// Cmp reg8, reg8
	foreach (Register regA; Register.min..RegisterMax) tester.cmpb(regA, Register.min);
	foreach (Register regB; Register.min..RegisterMax) tester.cmpb(Register.min, regB);
	tester.assertHexAndReset("38C038C138C238C34038C44038C54038C64038C74138C04138C14138C24138C34138C44138C54138C64138C738C038C838D038D84038E04038E84038F04038F84438C04438C84438D04438D84438E04438E84438F04438F8");

	// Cmp reg16, reg16
	foreach (Register regA; Register.min..RegisterMax) tester.cmpw(regA, Register.min);
	foreach (Register regB; Register.min..RegisterMax) tester.cmpw(Register.min, regB);
	tester.assertHexAndReset("6639C06639C16639C26639C36639C46639C56639C66639C7664139C0664139C1664139C2664139C3664139C4664139C5664139C6664139C76639C06639C86639D06639D86639E06639E86639F06639F8664439C0664439C8664439D0664439D8664439E0664439E8664439F0664439F8");

	// Cmp reg32, reg32
	foreach (Register regA; Register.min..RegisterMax) tester.cmpd(regA, Register.min);
	foreach (Register regB; Register.min..RegisterMax) tester.cmpd(Register.min, regB);
	tester.assertHexAndReset("39C039C139C239C339C439C539C639C74139C04139C14139C24139C34139C44139C54139C64139C739C039C839D039D839E039E839F039F84439C04439C84439D04439D84439E04439E84439F04439F8");

	// Cmp reg64, reg64
	foreach (Register regA; Register.min..RegisterMax) tester.cmpq(regA, Register.min);
	foreach (Register regB; Register.min..RegisterMax) tester.cmpq(Register.min, regB);
	tester.assertHexAndReset("4839C04839C14839C24839C34839C44839C54839C64839C74939C04939C14939C24939C34939C44939C54939C64939C74839C04839C84839D04839D84839E04839E84839F04839F84C39C04C39C84C39D04C39D84C39E04C39E84C39F04C39F8");

	// Cmp reg8, imm8
	foreach (Register regA; Register.min..RegisterMax) tester.cmpb(regA, Imm8(0x24));
	tester.assertHexAndReset("80F82480F92480FA2480FB244080FC244080FD244080FE244080FF244180F8244180F9244180FA244180FB244180FC244180FD244180FE244180FF24");

	// Cmp reg16, imm8
	foreach (Register regA; Register.min..RegisterMax) tester.cmpw(regA, Imm8(0x24));
	tester.assertHexAndReset("6683F8246683F9246683FA246683FB246683FC246683FD246683FE246683FF24664183F824664183F924664183FA24664183FB24664183FC24664183FD24664183FE24664183FF24");

	// Cmp reg32, imm8
	foreach (Register regA; Register.min..RegisterMax) tester.cmpd(regA, Imm8(0x24));
	tester.assertHexAndReset("83F82483F92483FA2483FB2483FC2483FD2483FE2483FF244183F8244183F9244183FA244183FB244183FC244183FD244183FE244183FF24");

	// Cmp reg64, imm8
	foreach (Register regA; Register.min..RegisterMax) tester.cmpq(regA, Imm8(0x24));
	tester.assertHexAndReset("4883F8244883F9244883FA244883FB244883FC244883FD244883FE244883FF244983F8244983F9244983FA244983FB244983FC244983FD244983FE244983FF24");

	// Cmp reg16, imm16
	foreach (Register regA; Register.min..RegisterMax) tester.cmpw(regA, Imm16(0x2436));
	tester.assertHexAndReset("6681F836246681F936246681FA36246681FB36246681FC36246681FD36246681FE36246681FF3624664181F83624664181F93624664181FA3624664181FB3624664181FC3624664181FD3624664181FE3624664181FF3624");

	// Cmp reg32, imm32
	foreach (Register regA; Register.min..RegisterMax) tester.cmpd(regA, Imm32(0x24364758));
	tester.assertHexAndReset("81F85847362481F95847362481FA5847362481FB5847362481FC5847362481FD5847362481FE5847362481FF584736244181F8584736244181F9584736244181FA584736244181FB584736244181FC584736244181FD584736244181FE584736244181FF58473624");

	// Cmp reg64, imm64
	foreach (Register regA; Register.min..RegisterMax) tester.cmpq(regA, Imm32(0x24364758));
	tester.assertHexAndReset("4881F8584736244881F9584736244881FA584736244881FB584736244881FC584736244881FD584736244881FE584736244881FF584736244981F8584736244981F9584736244981FA584736244981FB584736244981FC584736244981FD584736244981FE584736244981FF58473624");


	// not BYTE PTR [reg]
	foreach (Register reg; Register.min..RegisterMax) tester.notb(memAddrBase(reg));
	tester.assertHexAndReset("F610F611F612F613F61424F65500F616F61741F61041F61141F61241F61341F6142441F6550041F61641F617");

	// not WORD PTR [reg]
	foreach (Register reg; Register.min..RegisterMax) tester.notw(memAddrBase(reg));
	tester.assertHexAndReset("66F71066F71166F71266F71366F7142466F7550066F71666F7176641F7106641F7116641F7126641F7136641F714246641F755006641F7166641F717");

	// not DWORD PTR [reg]
	foreach (Register reg; Register.min..RegisterMax) tester.notd(memAddrBase(reg));
	tester.assertHexAndReset("F710F711F712F713F71424F75500F716F71741F71041F71141F71241F71341F7142441F7550041F71641F717");

	// not QWORD PTR [reg]
	foreach (Register reg; Register.min..RegisterMax) tester.notq(memAddrBase(reg));
	tester.assertHexAndReset("48F71048F71148F71248F71348F7142448F7550048F71648F71749F71049F71149F71249F71349F7142449F7550049F71649F717");

	// not reg8
	foreach (Register reg; Register.min..RegisterMax) tester.notb(reg);
	tester.assertHexAndReset("F6D0F6D1F6D2F6D340F6D440F6D540F6D640F6D741F6D041F6D141F6D241F6D341F6D441F6D541F6D641F6D7");

	// not reg16
	foreach (Register reg; Register.min..RegisterMax) tester.notw(reg);
	tester.assertHexAndReset("66F7D066F7D166F7D266F7D366F7D466F7D566F7D666F7D76641F7D06641F7D16641F7D26641F7D36641F7D46641F7D56641F7D66641F7D7");

	// not reg32
	foreach (Register reg; Register.min..RegisterMax) tester.notd(reg);
	tester.assertHexAndReset("F7D0F7D1F7D2F7D3F7D4F7D5F7D6F7D741F7D041F7D141F7D241F7D341F7D441F7D541F7D641F7D7");

	// not reg64
	foreach (Register reg; Register.min..RegisterMax) tester.notq(reg);
	tester.assertHexAndReset("48F7D048F7D148F7D248F7D348F7D448F7D548F7D648F7D749F7D049F7D149F7D249F7D349F7D449F7D549F7D649F7D7");


	// jmp
	tester.jmp(Imm8(0xAA));
	tester.jmp(Imm32(0xAABBCCDD));
	tester.assertHexAndReset("EBAAE9DDCCBBAA");

	// je
	tester.jcc(Condition.E, Imm8(0xAA));
	tester.jcc(Condition.E, Imm32(0xAABBCCDD));
	tester.assertHexAndReset("74AA0F84DDCCBBAA");

	//jne
	tester.jcc(Condition.NE, Imm8(0xAA));
	tester.jcc(Condition.NE, Imm32(0xAABBCCDD));
	tester.assertHexAndReset("75AA0F85DDCCBBAA");


	// sete
	foreach (Register reg; Register.min..RegisterMax) tester.setcc(Condition.E, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.setcc(Condition.E, memAddrBase(reg));
	tester.assertHexAndReset("0F94C00F94C10F94C20F94C3400F94C4400F94C5400F94C6400F94C7410F94C0410F94C1410F94C2410F94C3410F94C4410F94C5410F94C6410F94C70F94000F94010F94020F94030F9404240F9445000F94060F9407410F9400410F9401410F9402410F9403410F940424410F944500410F9406410F9407");

	// setne
	foreach (Register reg; Register.min..RegisterMax) tester.setcc(Condition.NE, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.setcc(Condition.NE, memAddrBase(reg));
	tester.assertHexAndReset("0F95C00F95C10F95C20F95C3400F95C4400F95C5400F95C6400F95C7410F95C0410F95C1410F95C2410F95C3410F95C4410F95C5410F95C6410F95C70F95000F95010F95020F95030F9504240F9545000F95060F9507410F9500410F9501410F9502410F9503410F950424410F954500410F9506410F9507");

	// setg
	foreach (Register reg; Register.min..RegisterMax) tester.setcc(Condition.G, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.setcc(Condition.G, memAddrBase(reg));
	tester.assertHexAndReset("0F9FC00F9FC10F9FC20F9FC3400F9FC4400F9FC5400F9FC6400F9FC7410F9FC0410F9FC1410F9FC2410F9FC3410F9FC4410F9FC5410F9FC6410F9FC70F9F000F9F010F9F020F9F030F9F04240F9F45000F9F060F9F07410F9F00410F9F01410F9F02410F9F03410F9F0424410F9F4500410F9F06410F9F07");



	// testb
	foreach (Register reg; Register.min..RegisterMax) tester.testb(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.testb(Register.min, reg);
	tester.assertHexAndReset("84C084C184C284C34084C44084C54084C64084C74184C04184C14184C24184C34184C44184C54184C64184C784C084C884D084D84084E04084E84084F04084F84484C04484C84484D04484D84484E04484E84484F04484F8");

	// testw
	foreach (Register reg; Register.min..RegisterMax) tester.testw(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.testw(Register.min, reg);
	tester.assertHexAndReset("6685C06685C16685C26685C36685C46685C56685C66685C7664185C0664185C1664185C2664185C3664185C4664185C5664185C6664185C76685C06685C86685D06685D86685E06685E86685F06685F8664485C0664485C8664485D0664485D8664485E0664485E8664485F0664485F8");

	// testd
	foreach (Register reg; Register.min..RegisterMax) tester.testd(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.testd(Register.min, reg);
	tester.assertHexAndReset("85C085C185C285C385C485C585C685C74185C04185C14185C24185C34185C44185C54185C64185C785C085C885D085D885E085E885F085F84485C04485C84485D04485D84485E04485E84485F04485F8");

	// testq
	foreach (Register reg; Register.min..RegisterMax) tester.testq(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.testq(Register.min, reg);
	tester.assertHexAndReset("4885C04885C14885C24885C34885C44885C54885C64885C74985C04985C14985C24985C34985C44985C54985C64985C74885C04885C84885D04885D84885E04885E84885F04885F84C85C04C85C84C85D04C85D84C85E04C85E84C85F04C85F8");


	// Imul reg16, reg16
	foreach (Register regA; Register.min..RegisterMax) tester.imulw(regA, Register.min);
	foreach (Register regB; Register.min..RegisterMax) tester.imulw(Register.min, regB);
	tester.assertHexAndReset("660FAFC0660FAFC8660FAFD0660FAFD8660FAFE0660FAFE8660FAFF0660FAFF866440FAFC066440FAFC866440FAFD066440FAFD866440FAFE066440FAFE866440FAFF066440FAFF8660FAFC0660FAFC1660FAFC2660FAFC3660FAFC4660FAFC5660FAFC6660FAFC766410FAFC066410FAFC166410FAFC266410FAFC366410FAFC466410FAFC566410FAFC666410FAFC7");

	// Imul reg32, reg32
	foreach (Register regA; Register.min..RegisterMax) tester.imuld(regA, Register.min);
	foreach (Register regB; Register.min..RegisterMax) tester.imuld(Register.min, regB);
	tester.assertHexAndReset("0FAFC00FAFC80FAFD00FAFD80FAFE00FAFE80FAFF00FAFF8440FAFC0440FAFC8440FAFD0440FAFD8440FAFE0440FAFE8440FAFF0440FAFF80FAFC00FAFC10FAFC20FAFC30FAFC40FAFC50FAFC60FAFC7410FAFC0410FAFC1410FAFC2410FAFC3410FAFC4410FAFC5410FAFC6410FAFC7");

	// Imul reg64, reg64
	foreach (Register regA; Register.min..RegisterMax) tester.imulq(regA, Register.min);
	foreach (Register regB; Register.min..RegisterMax) tester.imulq(Register.min, regB);
	tester.assertHexAndReset("480FAFC0480FAFC8480FAFD0480FAFD8480FAFE0480FAFE8480FAFF0480FAFF84C0FAFC04C0FAFC84C0FAFD04C0FAFD84C0FAFE04C0FAFE84C0FAFF04C0FAFF8480FAFC0480FAFC1480FAFC2480FAFC3480FAFC4480FAFC5480FAFC6480FAFC7490FAFC0490FAFC1490FAFC2490FAFC3490FAFC4490FAFC5490FAFC6490FAFC7");

	// Imul reg16, mem16
	foreach (Register regA; Register.min..RegisterMax) tester.imulw(Register.min, memAddrBase(regA));
	tester.assertHexAndReset("660FAF00660FAF01660FAF02660FAF03660FAF0424660FAF4500660FAF06660FAF0766410FAF0066410FAF0166410FAF0266410FAF0366410FAF042466410FAF450066410FAF0666410FAF07");

	// Imul reg32, mem32
	foreach (Register regA; Register.min..RegisterMax) tester.imuld(Register.min, memAddrBase(regA));
	tester.assertHexAndReset("0FAF000FAF010FAF020FAF030FAF04240FAF45000FAF060FAF07410FAF00410FAF01410FAF02410FAF03410FAF0424410FAF4500410FAF06410FAF07");

	// Imul reg64, mem64
	foreach (Register regA; Register.min..RegisterMax) tester.imulq(Register.min, memAddrBase(regA));
	tester.assertHexAndReset("480FAF00480FAF01480FAF02480FAF03480FAF0424480FAF4500480FAF06480FAF07490FAF00490FAF01490FAF02490FAF03490FAF0424490FAF4500490FAF06490FAF07");


	// Imul reg16, reg16, imm8
	foreach (Register regA; Register.min..RegisterMax) tester.imulw(regA, Register.min, Imm8(0x24));
	foreach (Register regB; Register.min..RegisterMax) tester.imulw(Register.min, regB, Imm8(0x24));
	tester.assertHexAndReset("666BC024666BC824666BD024666BD824666BE024666BE824666BF024666BF82466446BC02466446BC82466446BD02466446BD82466446BE02466446BE82466446BF02466446BF824666BC024666BC124666BC224666BC324666BC424666BC524666BC624666BC72466416BC02466416BC12466416BC22466416BC32466416BC42466416BC52466416BC62466416BC724");

	// Imul reg32, reg32, imm8
	foreach (Register regA; Register.min..RegisterMax) tester.imuld(regA, Register.min, Imm8(0x24));
	foreach (Register regB; Register.min..RegisterMax) tester.imuld(Register.min, regB, Imm8(0x24));
	tester.assertHexAndReset("6BC0246BC8246BD0246BD8246BE0246BE8246BF0246BF824446BC024446BC824446BD024446BD824446BE024446BE824446BF024446BF8246BC0246BC1246BC2246BC3246BC4246BC5246BC6246BC724416BC024416BC124416BC224416BC324416BC424416BC524416BC624416BC724");

	// Imul reg64, reg64, imm8
	foreach (Register regA; Register.min..RegisterMax) tester.imulq(regA, Register.min, Imm8(0x24));
	foreach (Register regB; Register.min..RegisterMax) tester.imulq(Register.min, regB, Imm8(0x24));
	tester.assertHexAndReset("486BC024486BC824486BD024486BD824486BE024486BE824486BF024486BF8244C6BC0244C6BC8244C6BD0244C6BD8244C6BE0244C6BE8244C6BF0244C6BF824486BC024486BC124486BC224486BC324486BC424486BC524486BC624486BC724496BC024496BC124496BC224496BC324496BC424496BC524496BC624496BC724");

	// Imul reg16, reg16, imm16
	foreach (Register regA; Register.min..RegisterMax) tester.imulw(regA, Register.min, Imm16(0x2436));
	foreach (Register regB; Register.min..RegisterMax) tester.imulw(Register.min, regB, Imm16(0x2436));
	tester.assertHexAndReset("6669C036246669C836246669D036246669D836246669E036246669E836246669F036246669F83624664469C03624664469C83624664469D03624664469D83624664469E03624664469E83624664469F03624664469F836246669C036246669C136246669C236246669C336246669C436246669C536246669C636246669C73624664169C03624664169C13624664169C23624664169C33624664169C43624664169C53624664169C63624664169C73624");

	// Imul reg32, reg32, imm32
	foreach (Register regA; Register.min..RegisterMax) tester.imuld(regA, Register.min, Imm32(0x24364758));
	foreach (Register regB; Register.min..RegisterMax) tester.imuld(Register.min, regB, Imm32(0x24364758));
	tester.assertHexAndReset("69C05847362469C85847362469D05847362469D85847362469E05847362469E85847362469F05847362469F8584736244469C0584736244469C8584736244469D0584736244469D8584736244469E0584736244469E8584736244469F0584736244469F85847362469C05847362469C15847362469C25847362469C35847362469C45847362469C55847362469C65847362469C7584736244169C0584736244169C1584736244169C2584736244169C3584736244169C4584736244169C5584736244169C6584736244169C758473624");

	// Imul reg64, reg64, imm32
	foreach (Register regA; Register.min..RegisterMax) tester.imulq(regA, Register.min, Imm32(0x24364758));
	foreach (Register regB; Register.min..RegisterMax) tester.imulq(Register.min, regB, Imm32(0x24364758));
	tester.assertHexAndReset("4869C0584736244869C8584736244869D0584736244869D8584736244869E0584736244869E8584736244869F0584736244869F8584736244C69C0584736244C69C8584736244C69D0584736244C69D8584736244C69E0584736244C69E8584736244C69F0584736244C69F8584736244869C0584736244869C1584736244869C2584736244869C3584736244869C4584736244869C5584736244869C6584736244869C7584736244969C0584736244969C1584736244969C2584736244969C3584736244969C4584736244969C5584736244969C6584736244969C758473624");


	// Imul reg16, mem16, imm8
	foreach (Register regA; Register.min..RegisterMax) tester.imulw(Register.min, memAddrBase(regA), Imm8(0x24));
	tester.assertHexAndReset("666B0024666B0124666B0224666B0324666B042424666B450024666B0624666B072466416B002466416B012466416B022466416B032466416B04242466416B45002466416B062466416B0724");

	// Imul reg32, mem32, imm8
	foreach (Register regA; Register.min..RegisterMax) tester.imuld(Register.min, memAddrBase(regA), Imm8(0x24));
	tester.assertHexAndReset("6B00246B01246B02246B03246B0424246B4500246B06246B0724416B0024416B0124416B0224416B0324416B042424416B450024416B0624416B0724");

	// Imul reg64, mem64, imm8
	foreach (Register regA; Register.min..RegisterMax) tester.imulq(Register.min, memAddrBase(regA), Imm8(0x24));
	tester.assertHexAndReset("486B0024486B0124486B0224486B0324486B042424486B450024486B0624486B0724496B0024496B0124496B0224496B0324496B042424496B450024496B0624496B0724");



	// cwd / cdq / cqo
	tester.cwd();
	tester.cdq();
	tester.cqo();
	tester.assertHexAndReset("6699994899");

	// pop reg16
	foreach (Register reg; Register.min..RegisterMax) tester.popw(reg);
	tester.assertHexAndReset("66586659665A665B665C665D665E665F66415866415966415A66415B66415C66415D66415E66415F");

	// pop reg64
	foreach (Register reg; Register.min..RegisterMax) tester.popq(reg);
	tester.assertHexAndReset("58595A5B5C5D5E5F41584159415A415B415C415D415E415F");

	// pop WORD PTR [reg]
	foreach (Register reg; Register.min..RegisterMax) tester.popw(memAddrBase(reg));
	tester.assertHexAndReset("668F00668F01668F02668F03668F0424668F4500668F06668F0766418F0066418F0166418F0266418F0366418F042466418F450066418F0666418F07");

	// pop QWORD PTR [reg]
	foreach (Register reg; Register.min..RegisterMax) tester.popq(memAddrBase(reg));
	tester.assertHexAndReset("8F008F018F028F038F04248F45008F068F07418F00418F01418F02418F03418F0424418F4500418F06418F07");


	// push reg16
	foreach (Register reg; Register.min..RegisterMax) tester.pushw(reg);
	tester.assertHexAndReset("66506651665266536654665566566657664150664151664152664153664154664155664156664157");

	// push reg64
	foreach (Register reg; Register.min..RegisterMax) tester.pushq(reg);
	tester.assertHexAndReset("505152535455565741504151415241534154415541564157");

	// push WORD PTR [reg]
	foreach (Register reg; Register.min..RegisterMax) tester.pushw(memAddrBase(reg));
	tester.assertHexAndReset("66FF3066FF3166FF3266FF3366FF342466FF750066FF3666FF376641FF306641FF316641FF326641FF336641FF34246641FF75006641FF366641FF37");

	// push QWORD PTR [reg]
	foreach (Register reg; Register.min..RegisterMax) tester.pushq(memAddrBase(reg));
	tester.assertHexAndReset("FF30FF31FF32FF33FF3424FF7500FF36FF3741FF3041FF3141FF3241FF3341FF342441FF750041FF3641FF37");

	// push Imm8/16/32
	tester.pushb(Imm8(0x11));
	tester.pushw(Imm16(0x1122));
	tester.pushd(Imm32(0x11223344));
	tester.assertHexAndReset("6A11666822116844332211");


	// mul reg8
	foreach (Register reg; Register.min..RegisterMax) tester.mulb(reg);
	tester.assertHexAndReset("F6E0F6E1F6E2F6E340F6E440F6E540F6E640F6E741F6E041F6E141F6E241F6E341F6E441F6E541F6E641F6E7");

	// mul reg16
	foreach (Register reg; Register.min..RegisterMax) tester.mulw(reg);
	tester.assertHexAndReset("66F7E066F7E166F7E266F7E366F7E466F7E566F7E666F7E76641F7E06641F7E16641F7E26641F7E36641F7E46641F7E56641F7E66641F7E7");

	// mul reg32
	foreach (Register reg; Register.min..RegisterMax) tester.muld(reg);
	tester.assertHexAndReset("F7E0F7E1F7E2F7E3F7E4F7E5F7E6F7E741F7E041F7E141F7E241F7E341F7E441F7E541F7E641F7E7");

	// mul reg64
	foreach (Register reg; Register.min..RegisterMax) tester.mulq(reg);
	tester.assertHexAndReset("48F7E048F7E148F7E248F7E348F7E448F7E548F7E648F7E749F7E049F7E149F7E249F7E349F7E449F7E549F7E649F7E7");

	// mul BYTE PTR "reg"
	foreach (Register reg; Register.min..RegisterMax) tester.mulb(memAddrBase(reg));
	tester.assertHexAndReset("F620F621F622F623F62424F66500F626F62741F62041F62141F62241F62341F6242441F6650041F62641F627");

	// mul WORD PTR "reg"
	foreach (Register reg; Register.min..RegisterMax) tester.mulw(memAddrBase(reg));
	tester.assertHexAndReset("66F72066F72166F72266F72366F7242466F7650066F72666F7276641F7206641F7216641F7226641F7236641F724246641F765006641F7266641F727");

	// mul DWORD PTR "reg"
	foreach (Register reg; Register.min..RegisterMax) tester.muld(memAddrBase(reg));
	tester.assertHexAndReset("F720F721F722F723F72424F76500F726F72741F72041F72141F72241F72341F7242441F7650041F72641F727");

	// mul QWORD PTR "reg"
	foreach (Register reg; Register.min..RegisterMax) tester.mulq(memAddrBase(reg));
	tester.assertHexAndReset("48F72048F72148F72248F72348F7242448F7650048F72648F72749F72049F72149F72249F72349F7242449F7650049F72649F727");


	// inc BYTE PTR [reg]
	foreach (Register reg; Register.min..RegisterMax) tester.incb(memAddrBase(reg));
	tester.assertHexAndReset("FE00FE01FE02FE03FE0424FE4500FE06FE0741FE0041FE0141FE0241FE0341FE042441FE450041FE0641FE07");

	// inc WORD PTR [reg]
	foreach (Register reg; Register.min..RegisterMax) tester.incw(memAddrBase(reg));
	tester.assertHexAndReset("66FF0066FF0166FF0266FF0366FF042466FF450066FF0666FF076641FF006641FF016641FF026641FF036641FF04246641FF45006641FF066641FF07");

	// inc DWORD PTR [reg]
	foreach (Register reg; Register.min..RegisterMax) tester.incd(memAddrBase(reg));
	tester.assertHexAndReset("FF00FF01FF02FF03FF0424FF4500FF06FF0741FF0041FF0141FF0241FF0341FF042441FF450041FF0641FF07");

	// inc QWORD PTR [reg]
	foreach (Register reg; Register.min..RegisterMax) tester.incq(memAddrBase(reg));
	tester.assertHexAndReset("48FF0048FF0148FF0248FF0348FF042448FF450048FF0648FF0749FF0049FF0149FF0249FF0349FF042449FF450049FF0649FF07");

	// inc reg8
	foreach (Register reg; Register.min..RegisterMax) tester.incb(reg);
	tester.assertHexAndReset("FEC0FEC1FEC2FEC340FEC440FEC540FEC640FEC741FEC041FEC141FEC241FEC341FEC441FEC541FEC641FEC7");

	// inc reg16
	foreach (Register reg; Register.min..RegisterMax) tester.incw(reg);
	tester.assertHexAndReset("66FFC066FFC166FFC266FFC366FFC466FFC566FFC666FFC76641FFC06641FFC16641FFC26641FFC36641FFC46641FFC56641FFC66641FFC7");

	// inc reg32
	foreach (Register reg; Register.min..RegisterMax) tester.incd(reg);
	tester.assertHexAndReset("FFC0FFC1FFC2FFC3FFC4FFC5FFC6FFC741FFC041FFC141FFC241FFC341FFC441FFC541FFC641FFC7");

	// inc reg64
	foreach (Register reg; Register.min..RegisterMax) tester.incq(reg);
	tester.assertHexAndReset("48FFC048FFC148FFC248FFC348FFC448FFC548FFC648FFC749FFC049FFC149FFC249FFC349FFC449FFC549FFC649FFC7");

	// test memory encoding
	tester.incq(memAddrDisp32(0x11223344));
	tester.assertHexAndReset("48FF042544332211");

	foreach (Register regA; Register.min..RegisterMax) if (regA != Register.SP) tester.incq(memAddrIndexDisp32(regA, SibScale(0), 0x11223344));
	tester.assertHexAndReset("48FF04054433221148FF040D4433221148FF04154433221148FF041D4433221148FF042D4433221148FF04354433221148FF043D443322114AFF0405443322114AFF040D443322114AFF0415443322114AFF041D443322114AFF0425443322114AFF042D443322114AFF0435443322114AFF043D44332211");

	foreach (Register regA; Register.min..RegisterMax) tester.incq(memAddrBase(regA));
	tester.assertHexAndReset("48FF0048FF0148FF0248FF0348FF042448FF450048FF0648FF0749FF0049FF0149FF0249FF0349FF042449FF450049FF0649FF07");

	foreach (Register regA; Register.min..RegisterMax) tester.incq(memAddrBaseDisp32(regA, 0x11223344));
	tester.assertHexAndReset("48FF804433221148FF814433221148FF824433221148FF834433221148FF84244433221148FF854433221148FF864433221148FF874433221149FF804433221149FF814433221149FF824433221149FF834433221149FF84244433221149FF854433221149FF864433221149FF8744332211");

	foreach (Register regA; Register.min..RegisterMax) tester.incq(memAddrBaseIndex(regA, regA == Register.SP ? Register.AX : regA, SibScale(1)));
	tester.assertHexAndReset("48FF044048FF044948FF045248FF045B48FF044448FF446D0048FF047648FF047F4BFF04404BFF04494BFF04524BFF045B4BFF04644BFF446D004BFF04764BFF047F");

	foreach (Register regA; Register.min..RegisterMax) tester.incq(memAddrBaseIndexDisp32(regA, regA == Register.SP ? Register.AX : regA, SibScale(2), 0x11223344));
	tester.assertHexAndReset("48FF84804433221148FF84894433221148FF84924433221148FF849B4433221148FF84844433221148FF84AD4433221148FF84B64433221148FF84BF443322114BFF8480443322114BFF8489443322114BFF8492443322114BFF849B443322114BFF84A4443322114BFF84AD443322114BFF84B6443322114BFF84BF44332211");

	foreach (Register regA; Register.min..RegisterMax) tester.incq(memAddrBaseDisp8(regA, -2));
	tester.assertHexAndReset("48FF40FE48FF41FE48FF42FE48FF43FE48FF4424FE48FF45FE48FF46FE48FF47FE49FF40FE49FF41FE49FF42FE49FF43FE49FF4424FE49FF45FE49FF46FE49FF47FE");

	foreach (Register regA; Register.min..RegisterMax) tester.incq(memAddrBaseIndexDisp8(regA, regA == Register.SP ? Register.AX : regA, SibScale(3), -2));
	tester.assertHexAndReset("48FF44C0FE48FF44C9FE48FF44D2FE48FF44DBFE48FF44C4FE48FF44EDFE48FF44F6FE48FF44FFFE4BFF44C0FE4BFF44C9FE4BFF44D2FE4BFF44DBFE4BFF44E4FE4BFF44EDFE4BFF44F6FE4BFF44FFFE");


	// cvtss2sd
	foreach (Register reg; Register.min..RegisterMax) tester.cvtss2sd(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.cvtss2sd(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.cvtss2sd(reg, memAddrDisp32(0x55667788));
	tester.assertHexAndReset

	// cvtsd2ss
	foreach (Register reg; Register.min..RegisterMax) tester.cvtsd2ss(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.cvtsd2ss(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.cvtsd2ss(reg, memAddrDisp32(0x55667788));
	tester.assertHexAndReset

	// cvtss2sid
	foreach (Register reg; Register.min..RegisterMax) tester.cvtss2sid(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.cvtss2sid(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.cvtss2sid(reg, memAddrDisp32(0x55667788));
	tester.assertHexAndReset

	// cvtss2siq
	foreach (Register reg; Register.min..RegisterMax) tester.cvtss2siq(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.cvtss2siq(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.cvtss2siq(reg, memAddrDisp32(0x55667788));
	tester.assertHexAndReset

	// cvtsid2ss
	foreach (Register reg; Register.min..RegisterMax) tester.cvtsid2ss(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.cvtsid2ss(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.cvtsid2ss(reg, memAddrDisp32(0x55667788));
	tester.assertHexAndReset

	// cvtsiq2ss
	foreach (Register reg; Register.min..RegisterMax) tester.cvtsiq2ss(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.cvtsiq2ss(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.cvtsiq2ss(reg, memAddrDisp32(0x55667788));
	tester.assertHexAndReset

	// cvttss2sid
	foreach (Register reg; Register.min..RegisterMax) tester.cvttss2sid(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.cvttss2sid(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.cvttss2sid(reg, memAddrDisp32(0x55667788));
	tester.assertHexAndReset

	// cvttss2siq
	foreach (Register reg; Register.min..RegisterMax) tester.cvttss2siq(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.cvttss2siq(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.cvttss2siq(reg, memAddrDisp32(0x55667788));
	tester.assertHexAndReset

	// cvtsd2sid
	foreach (Register reg; Register.min..RegisterMax) tester.cvtsd2sid(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.cvtsd2sid(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.cvtsd2sid(reg, memAddrDisp32(0x55667788));
	tester.assertHexAndReset

	// cvtsd2siq
	foreach (Register reg; Register.min..RegisterMax) tester.cvtsd2siq(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.cvtsd2siq(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.cvtsd2siq(reg, memAddrDisp32(0x55667788));
	tester.assertHexAndReset("F2480F2DC0F2480F2DC8F2480F2DD0F2480F2DD8F2480F2DE0F2480F2DE8F2480F2DF0F2480F2DF8F24C0F2DC0F24C0F2DC8F24C0F2DD0F24C0F2DD8F24C0F2DE0F24C0F2DE8F24C0F2DF0F24C0F2DF8F2480F2DC0F2480F2DC1F2480F2DC2F2480F2DC3F2480F2DC4F2480F2DC5F2480F2DC6F2480F2DC7F2490F2DC0F2490F2DC1F2490F2DC2F2490F2DC3F2490F2DC4F2490F2DC5F2490F2DC6F2490F2DC7F2480F2D042588776655F2480F2D0C2588776655F2480F2D142588776655F2480F2D1C2588776655F2480F2D242588776655F2480F2D2C2588776655F2480F2D342588776655F2480F2D3C2588776655F24C0F2D042588776655F24C0F2D0C2588776655F24C0F2D142588776655F24C0F2D1C2588776655F24C0F2D242588776655F24C0F2D2C2588776655F24C0F2D342588776655F24C0F2D3C2588776655");

	// cvtsid2sd
	foreach (Register reg; Register.min..RegisterMax) tester.cvtsid2sd(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.cvtsid2sd(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.cvtsid2sd(reg, memAddrDisp32(0x55667788));
	tester.assertHexAndReset

	// cvtsiq2sd
	foreach (Register reg; Register.min..RegisterMax) tester.cvtsiq2sd(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.cvtsiq2sd(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.cvtsiq2sd(reg, memAddrDisp32(0x55667788));
	tester.assertHexAndReset("F2480F2AC0F2480F2AC8F2480F2AD0F2480F2AD8F2480F2AE0F2480F2AE8F2480F2AF0F2480F2AF8F24C0F2AC0F24C0F2AC8F24C0F2AD0F24C0F2AD8F24C0F2AE0F24C0F2AE8F24C0F2AF0F24C0F2AF8F2480F2AC0F2480F2AC1F2480F2AC2F2480F2AC3F2480F2AC4F2480F2AC5F2480F2AC6F2480F2AC7F2490F2AC0F2490F2AC1F2490F2AC2F2490F2AC3F2490F2AC4F2490F2AC5F2490F2AC6F2490F2AC7F2480F2A042588776655F2480F2A0C2588776655F2480F2A142588776655F2480F2A1C2588776655F2480F2A242588776655F2480F2A2C2588776655F2480F2A342588776655F2480F2A3C2588776655F24C0F2A042588776655F24C0F2A0C2588776655F24C0F2A142588776655F24C0F2A1C2588776655F24C0F2A242588776655F24C0F2A2C2588776655F24C0F2A342588776655F24C0F2A3C2588776655");

	// cvttsd2sid
	foreach (Register reg; Register.min..RegisterMax) tester.cvttsd2sid(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.cvttsd2sid(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.cvttsd2sid(reg, memAddrDisp32(0x55667788));
	tester.assertHexAndReset

	// cvttsd2siq
	foreach (Register reg; Register.min..RegisterMax) tester.cvttsd2siq(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.cvttsd2siq(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.cvttsd2siq(reg, memAddrDisp32(0x55667788));
	tester.assertHexAndReset



	// movss
	foreach (Register reg; Register.min..RegisterMax) tester.movss(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.movss(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.movss(reg, memAddrDisp32(0x11223344));
	foreach (Register reg; Register.min..RegisterMax) tester.movss(memAddrDisp32(0x11223344), reg);
	tester.assertHexAndReset

	// movsd
	foreach (Register reg; Register.min..RegisterMax) tester.movsd(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.movsd(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.movsd(reg, memAddrDisp32(0x11223344));
	foreach (Register reg; Register.min..RegisterMax) tester.movsd(memAddrDisp32(0x11223344), reg);
	tester.assertHexAndReset

	// movaps
	foreach (Register reg; Register.min..RegisterMax) tester.movaps(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.movaps(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.movaps(reg, memAddrDisp32(0x11223344));
	foreach (Register reg; Register.min..RegisterMax) tester.movaps(memAddrDisp32(0x11223344), reg);
	tester.assertHexAndReset

	// movups
	foreach (Register reg; Register.min..RegisterMax) tester.movups(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.movups(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.movups(reg, memAddrDisp32(0x11223344));
	foreach (Register reg; Register.min..RegisterMax) tester.movups(memAddrDisp32(0x11223344), reg);
	tester.assertHexAndReset

	// movd_xr
	foreach (Register reg; Register.min..RegisterMax) tester.movd_xr(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.movd_xr(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.movd_xr(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset

	// movq_xr
	foreach (Register reg; Register.min..RegisterMax) tester.movq_xr(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.movq_xr(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.movq_xr(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset

	// movd_rx
	foreach (Register reg; Register.min..RegisterMax) tester.movd_rx(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.movd_rx(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.movd_rx(memAddrDisp32(0x11223344), reg);
	tester.assertHexAndReset

	// movq_rx
	foreach (Register reg; Register.min..RegisterMax) tester.movq_rx(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.movq_rx(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.movq_rx(memAddrDisp32(0x11223344), reg);
	tester.assertHexAndReset

	// andps
	foreach (Register reg; Register.min..RegisterMax) tester.andps(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.andps(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.andps(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset

	// andpd
	foreach (Register reg; Register.min..RegisterMax) tester.andpd(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.andpd(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.andpd(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset

	// orps
	foreach (Register reg; Register.min..RegisterMax) tester.orps(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.orps(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.orps(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset

	// orpd
	foreach (Register reg; Register.min..RegisterMax) tester.orpd(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.orpd(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.orpd(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset

	// xorps
	foreach (Register reg; Register.min..RegisterMax) tester.xorps(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.xorps(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.xorps(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset("0F57C00F57C80F57D00F57D80F57E00F57E80F57F00F57F8440F57C0440F57C8440F57D0440F57D8440F57E0440F57E8440F57F0440F57F80F57C00F57C10F57C20F57C30F57C40F57C50F57C60F57C7410F57C0410F57C1410F57C2410F57C3410F57C4410F57C5410F57C6410F57C70F570425443322110F570C25443322110F571425443322110F571C25443322110F572425443322110F572C25443322110F573425443322110F573C2544332211440F57042544332211440F570C2544332211440F57142544332211440F571C2544332211440F57242544332211440F572C2544332211440F57342544332211440F573C2544332211");

	// xorpd
	foreach (Register reg; Register.min..RegisterMax) tester.xorpd(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.xorpd(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.xorpd(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset

	// addps
	foreach (Register reg; Register.min..RegisterMax) tester.addps(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.addps(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.addps(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset

	// addpd
	foreach (Register reg; Register.min..RegisterMax) tester.addpd(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.addpd(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.addpd(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset

	// mulps
	foreach (Register reg; Register.min..RegisterMax) tester.mulps(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.mulps(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.mulps(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset

	// mulpd
	foreach (Register reg; Register.min..RegisterMax) tester.mulpd(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.mulpd(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.mulpd(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset

	// subps
	foreach (Register reg; Register.min..RegisterMax) tester.subps(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.subps(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.subps(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset

	// subpd
	foreach (Register reg; Register.min..RegisterMax) tester.subpd(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.subpd(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.subpd(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset

	// divps
	foreach (Register reg; Register.min..RegisterMax) tester.divps(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.divps(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.divps(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset

	// divpd
	foreach (Register reg; Register.min..RegisterMax) tester.divpd(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.divpd(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.divpd(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset

	// cmpss
	foreach (ubyte i; 0..8) tester.cmpss(cast(Register)i, cast(Register)(7-i), Imm8(i));
	foreach (Register reg; Register.min..RegisterMax) tester.cmpss(reg, Register.min, Imm8(0));
	foreach (Register reg; Register.min..RegisterMax) tester.cmpss(Register.min, reg, Imm8(0));
	foreach (Register reg; Register.min..RegisterMax) tester.cmpss(reg, memAddrDisp32(0x11223344), Imm8(0));
	tester.assertHexAndReset

	// cmpsd
	foreach (ubyte i; 0..8) tester.cmpsd(cast(Register)i, cast(Register)(7-i), Imm8(i));
	foreach (Register reg; Register.min..RegisterMax) tester.cmpsd(reg, Register.min, Imm8(0));
	foreach (Register reg; Register.min..RegisterMax) tester.cmpsd(Register.min, reg, Imm8(0));
	foreach (Register reg; Register.min..RegisterMax) tester.cmpsd(reg, memAddrDisp32(0x11223344), Imm8(0));
	tester.assertHexAndReset

	// ucomiss
	foreach (Register reg; Register.min..RegisterMax) tester.ucomiss(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.ucomiss(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.ucomiss(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset

	// ucomisd
	foreach (Register reg; Register.min..RegisterMax) tester.ucomisd(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.ucomisd(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.ucomisd(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset

	// addss
	foreach (Register reg; Register.min..RegisterMax) tester.addss(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.addss(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.addss(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset

	// addsd
	foreach (Register reg; Register.min..RegisterMax) tester.addsd(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.addsd(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.addsd(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset

	// subss
	foreach (Register reg; Register.min..RegisterMax) tester.subss(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.subss(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.subss(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset

	// subsd
	foreach (Register reg; Register.min..RegisterMax) tester.subsd(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.subsd(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.subsd(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset

	// mulss
	foreach (Register reg; Register.min..RegisterMax) tester.mulss(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.mulss(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.mulss(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset

	// mulsd
	foreach (Register reg; Register.min..RegisterMax) tester.mulsd(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.mulsd(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.mulsd(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset

	// divss
	foreach (Register reg; Register.min..RegisterMax) tester.divss(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.divss(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.divss(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset

	// divsd
	foreach (Register reg; Register.min..RegisterMax) tester.divsd(reg, Register.min);
	foreach (Register reg; Register.min..RegisterMax) tester.divsd(Register.min, reg);
	foreach (Register reg; Register.min..RegisterMax) tester.divsd(reg, memAddrDisp32(0x11223344));
	tester.assertHexAndReset("F20F5EC0F20F5EC8F20F5ED0F20F5ED8F20F5EE0F20F5EE8F20F5EF0F20F5EF8F2440F5EC0F2440F5EC8F2440F5ED0F2440F5ED8F2440F5EE0F2440F5EE8F2440F5EF0F2440F5EF8F20F5EC0F20F5EC1F20F5EC2F20F5EC3F20F5EC4F20F5EC5F20F5EC6F20F5EC7F2410F5EC0F2410F5EC1F2410F5EC2F2410F5EC3F2410F5EC4F2410F5EC5F2410F5EC6F2410F5EC7F20F5E042544332211F20F5E0C2544332211F20F5E142544332211F20F5E1C2544332211F20F5E242544332211F20F5E2C2544332211F20F5E342544332211F20F5E3C2544332211F2440F5E042544332211F2440F5E0C2544332211F2440F5E142544332211F2440F5E1C2544332211F2440F5E242544332211F2440F5E2C2544332211F2440F5E342544332211F2440F5E3C2544332211");

	auto durationTotal = currTime - startTime;
	writefln("amd64 assembler (%s/%s) successful tests in %ss",
		tester.totalTests - tester.numFailedTests,
		tester.totalTests,
		scaledNumberFmt(durationTotal));

	return tester.numFailedTests;
}
